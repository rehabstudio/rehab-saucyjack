{"version":3,"sources":["../src/saucy-jack.js"],"names":[],"mappings":"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","file":"build.js","sourcesContent":["export class SaucyJack {\n    constructor(options = {}) {\n\n        /**\n         * @property {object} DEBUG -  Show the scroll line on the screen.\n         * @property {object} TRIGGER_LINE_POS - Percentile Y co-ordinate (from 0 to 1) where the imaginary trigger line is in the viewport. Entities get 'triggered' when their top edge hits this line.\n         * @property {object} ENTITY_SELECTOR - A selector that we will grab on init to set up the list of elements to watch\n         * @property {object} ACTIVE_CLASS - The class we give any watched element when it goes over the trigger line.\n         * @property {object} INVERT_BEHAVIOUR - If true, the class is removed instead of added when it crosses the line, and vice versa.  Good for 'release'-style transitions-in.\n         */\n        const defaults = {\n            DEBUG: false,\n            TRIGGER_LINE_POS: 0.85,\n            ENTITY_SELECTOR: '.saucy-el',\n            ACTIVE_CLASS: 'saucy-active',\n            INVERT_BEHAVIOUR: false,\n        }\n        \n        // Checking if the passed 'options' param is an object. If its not then set it to the defaults.\n        if(options instanceof Object || !options instanceof Array) {\n          \n            options.DEBUG =  options.DEBUG ? options.DEBUG : defaults.DEBUG;\n            options.TRIGGER_LINE_POS = options.TRIGGER_LINE_POS ? options.TRIGGER_LINE_POS :defaults.TRIGGER_LINE_POS;\n            options.ENTITY_SELECTOR = options.ENTITY_SELECTOR ? options.ENTITY_SELECTOR : defaults.ENTITY_SELECTOR;\n            options.ACTIVE_CLASS = options.ACTIVE_CLASS ? options.ACTIVE_CLASS : defaults.ACTIVE_CLASS;\n            options.INVERT_BEHAVIOUR = options.INVERT_BEHAVIOUR ? options.INVERT_BEHAVIOUR : defaults.INVERT_BEHAVIOUR;\n        }else{\n            options = defaults;\n        }\n\n        this.options = options;\n\n        this._entities = [];\n        this._triggerLinePixelPos = 0;\n        this._scrollPos = 0;\n        this._debugEl = null;\n\n\n        var els = document.querySelectorAll(this.options.ENTITY_SELECTOR);\n        for(var i = 0, ln = els.length; i < ln; i++) {\n            this.addElement(els[i]);\n        }\n\n        this._getScrollPos();\n        this._updateTriggerLine();\n        this._updateEntities();\n        \n        if(this.options.DEBUG) {\n            this._debugEl = document.createElement('div');\n            this._debugEl.classList.add('saucy-debug');\n            document.body.appendChild(this._debugEl);\n            this._updateDebugEl();\n        }\n        \n        window.addEventListener('resize', this._onResize.bind(this), false);\n        window.addEventListener('scroll', this._onScroll.bind(this), false);\n    }\n\n    // Get the top edge positions of the entities on the page.\n    // NICETOHAVE: allow for triggering from the center or bottom edge of the el,\n    // not just from the top.\n    _updateEntities() {\n        this._entities.forEach(function(ent) {\n            ent.yTop = ent.el.getBoundingClientRect().top;\n            \n            // TODO: check if element is 'in range' and ignore if it isn't\n            \n            var isActive = (this._triggerLinePixelPos > ent.yTop);\n            this._setActiveStatus(ent, isActive);\n        }.bind(this));\n    }\n    \n    // Update the current scroll position (the top of the viewport).\n    _getScrollPos() {\n        this._scrollPos = window.scrollY || ((window.pageYOffset || document.body.scrollTop) - (document.body.clientTop || 0));\n    }\n\n    // Work out the actual pixel position of the 'trigger line' based on the viewport\n    // size and the trigger percentage.\n    _updateTriggerLine() {\n        this._triggerLinePixelPos = Math.round((window.innerHeight || document.documentElement.clientHeight) * this.options.TRIGGER_LINE_POS);\n    }\n    \n    // Add or remove the active attribute and class for the entity.\n    _setActiveStatus(ent, isActive) {\n        if (isActive === undefined) isActive = true;\n        if(ent.active === isActive) return;\n        ent.active = isActive;\n        var fn = (isActive && !this.options.INVERT_BEHAVIOUR) ? 'add' : 'remove';\n        ent.el.classList[fn](this.options.ACTIVE_CLASS);\n    }\n    \n    // Callback for the resize event. Re-calcs the positions of our entities.\n    // NICETOHAVE: debounce\n    _onResize() {\n        this._updateTriggerLine();\n        this._updateEntities();\n        if (this.options.DEBUG) this._updateDebugEl();\n    }\n    \n    // Callback for the resize event. Iterates the entities and add/removes the 'active'\n    // status if they've gone over the trigger line.\n    _onScroll() {\n        this._getScrollPos();\n        this._updateEntities();\n        if (this.options.DEBUG) this._updateDebugEl();\n    }\n    \n    // Updates the debug el.\n    _updateDebugEl() {        \n        this._debugEl.style.top = this._triggerLinePixelPos + 'px';\n    }\n    \n    // Add a wrapper object for an element to our 'watch list' for later use.\n    // NICETOHAVE: de-duplicate\n    addElement(el) {\n        var elObj = {\n            el: el,\n            yTop: 0,\n            active: false\n        };\n        this._entities.push(elObj);    \n    }\n    \n    // Init code.  Get our elements, store their positions,\n    // and set up the resize & scroll listeners.\n    // init() {\n    //     var els = document.querySelectorAll(ENTITY_SELECTOR);\n    //     for(var i = 0, ln = els.length; i < ln; i++) {\n    //         addElement(els[i]);\n    //     }\n\n    //     _getScrollPos();\n    //     _updateTriggerLine();\n    //     _updateEntities();\n        \n    //     if(DEBUG) {\n    //         _debugEl = document.createElement('div');\n    //         _debugEl.classList.add('saucy-debug');\n    //         document.body.appendChild(_debugEl);\n    //         _updateDebugEl();\n    //     }\n        \n    //     window.addEventListener('resize', _onResize, false);\n    //     window.addEventListener('scroll', _onScroll, false);\n    // }\n    \n    // // Exposed API for this module.\n    // return {\n    //     init: init,\n    //     add: addElement\n    // }\n}\n\n\n/*\n// \"...Well if it isn't SAUCY JACK!\"\n\n// Note: this is very verbose and broken down into little bits.  It could be\n// made way easier to read at the cost of being explicit - it's just an example\n// of the technique.\nvar SaucyJack = (function() {\n    \n    // Show the scroll line on the screen.\n    var DEBUG = true;\n    \n    // TODO: expose these constants as options for init()\n    \n    // Percentile Y co-ordinate (from 0 to 1) where the imaginary trigger line is in the viewport.\n    // Entities get 'triggered' when their top edge hits this line.\n    var TRIGGER_LINE_POS = 0.85;\n    \n    // A selector that we will grab on init to set up the list of elements to watch\n    var ENTITY_SELECTOR = '.saucy-el';\n    \n    // The class we give any watched element when it goes over the trigger line.\n    var ACTIVE_CLASS = 'saucy-active';\n    \n    // If true, the class is removed instead of added when it crosses the line,\n    // and vice versa.  Good for 'release'-style transitions-in.\n    var INVERT_BEHAVIOUR = false;\n    \n    // An array of elements that our engine is concerned with, wrapped in objects that\n    // cache their position and status. Better than testing every damn thing in the DOM.\n    var _entities = [];\n    \n    // The actual pixel position of the 'trigger line', calculated at runtime.\n    var _triggerLinePixelPos = 0;\n    \n    // The current scroll position in pixels.  Updated by the _onScroll.\n    var _scrollPos = 0;\n    \n    var _debugEl;\n    \n    // Get the top edge positions of the entities on the page.\n    // NICETOHAVE: allow for triggering from the center or bottom edge of the el,\n    // not just from the top.\n    function _updateEntities() {\n        _entities.forEach(function(ent) {\n            ent.yTop = ent.el.getBoundingClientRect().top;\n            \n            // TODO: check if element is 'in range' and ignore if it isn't\n            \n            var isActive = (_triggerLinePixelPos > ent.yTop);\n            _setActiveStatus(ent, isActive);\n        });\n    }\n    \n    // Update the current scroll position (the top of the viewport).\n    function _getScrollPos() {\n        _scrollPos = window.scrollY || ((window.pageYOffset || document.body.scrollTop) - (document.body.clientTop || 0));\n    }\n\n    // Work out the actual pixel position of the 'trigger line' based on the viewport\n    // size and the trigger percentage.\n    function _updateTriggerLine() {\n        _triggerLinePixelPos = Math.round((window.innerHeight || document.documentElement.clientHeight) * TRIGGER_LINE_POS);\n    }\n    \n    // Add or remove the active attribute and class for the entity.\n    function _setActiveStatus(ent, isActive) {\n        if (isActive === undefined) isActive = true;\n        if(ent.active === isActive) return;\n        ent.active = isActive;\n        var fn = (isActive && !INVERT_BEHAVIOUR) ? 'add' : 'remove';\n        ent.el.classList[fn](ACTIVE_CLASS);\n    }\n    \n    // Callback for the resize event. Re-calcs the positions of our entities.\n    // NICETOHAVE: debounce\n    function _onResize() {\n        _updateTriggerLine();\n        _updateEntities();\n        if (DEBUG) _updateDebugEl();\n    }\n    \n    // Callback for the resize event. Iterates the entities and add/removes the 'active'\n    // status if they've gone over the trigger line.\n    function _onScroll() {\n        _getScrollPos();\n        _updateEntities();\n        if (DEBUG) _updateDebugEl();\n    }\n    \n    // Updates the debug el.\n    function _updateDebugEl() {        \n        _debugEl.style.top = _triggerLinePixelPos + 'px';\n    }\n    \n    // Add a wrapper object for an element to our 'watch list' for later use.\n    // NICETOHAVE: de-duplicate\n    function addElement(el) {\n        var elObj = {\n            el: el,\n            yTop: 0,\n            active: false\n        };\n        _entities.push(elObj);    \n    }\n    \n    // Init code.  Get our elements, store their positions,\n    // and set up the resize & scroll listeners.\n    function init() {\n        var els = document.querySelectorAll(ENTITY_SELECTOR);\n        for(var i = 0, ln = els.length; i < ln; i++) {\n            addElement(els[i]);\n        }\n\n        _getScrollPos();\n        _updateTriggerLine();\n        _updateEntities();\n        \n        if(DEBUG) {\n            _debugEl = document.createElement('div');\n            _debugEl.classList.add('saucy-debug');\n            document.body.appendChild(_debugEl);\n            _updateDebugEl();\n        }\n        \n        window.addEventListener('resize', _onResize, false);\n        window.addEventListener('scroll', _onScroll, false);\n    }\n    \n    // Exposed API for this module.\n    return {\n        init: init,\n        add: addElement\n    }\n    \n})();\n\n// DO IT!\nSaucyJack.init();\n\n*/"]}